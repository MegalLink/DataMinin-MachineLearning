install.packages("base")
R.version()
install.packages("base")
install.packages("dplyr")
library(dplyr)
load("./data/03_data_exploration_carIns_final.Rdata")
load("/data/03_data_exploration_carIns_final.Rdata")
load("../data/03_data_exploration_carIns_final.Rdata")
load("./data/03_data_exploration/carIns_final.Rdata")
setwd("D:/Repositories/DataMining-MachineLearning")
load("./data/03_data_exploration/carIns_final.Rdata")
load("./data/03_data_exploration/carIns_final.Rdata")
load("./data/03_data_exploration/carIns_final.Rdata")
files <- list.files("data")
load("./data/03_data_exploration/carIns_final.Rdata")
files <- list.files("data")
print(files)
load("./data/03_data_exploration/carIns_final.Rdata")
files <- list.files("./data")
print(files)
load("./data/03_data_exploration/carIns_final.Rdata")
ls
files <- list.files("data")
print(files)
load("./data/03_data_exploration/carIns_final.Rdata")
files <- list.files("data")
print(files)
load("./data/03_data_exploration/carIns_final.Rdata")
clear
clean
files <- list.files("data")
print(files)
load("data/03_data_exploration/carIns_final.Rdata")
files <- list.files("./")
print(files)
load("data/03_data_exploration/carIns_final.Rdata")
files <- list.files("../")
print(files)
load("../data/03_data_exploration/carIns_final.Rdata")
head(carIns)
files <- list.files("../")
print(files)
load("../data/03_data_exploration/carIns_final.Rdata")
head(carIns_final)
print("hello world")
files <- list.files("../")
print(files)
load("../data/03_data_exploration/carIns_final.Rdata")
head(carIns_final)
load("../data/03_data_exploration/carIns_final.Rdata")
head(carIns_final)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
# Calculate the counts of cars by bodyStyle
car_counts <- table(carIns_final$bodyStyle)
# Print the counts
print(car_counts)
# Calculate the counts of cars by bodyStyle and fuelType
car_counts <- table(carIns_final$bodyStyle, carIns_final$fuelType)
# Print the counts
print(car_counts)
# Calculate the mean and standard deviation of cityMpg by bodyStyle
car_summary <- carIns_final %>%
group_by(bodyStyle) %>%
summarise(mean_cityMpg = mean(cityMpg),
sd_cityMpg = sd(cityMpg)) %>%
arrange(mean_cityMpg)
# Print the summary
print(car_summary)
# Calculate the summary statistics by bodyStyle for cityMpg and highwayMpg
car_summary <- carIns_final %>%
group_by(bodyStyle) %>%
summarise(mean_cityMpg = mean(cityMpg),
sd_cityMpg = sd(cityMpg),
median_cityMpg = median(cityMpg),
IQR_cityMpg = IQR(cityMpg),
mean_highwayMpg = mean(highwayMpg),
sd_highwayMpg = sd(highwayMpg),
median_highwayMpg = median(highwayMpg),
IQR_highwayMpg = IQR(highwayMpg))
# Print the summary
print(car_summary)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# Create scatter plot
ggplot(carIns_final, aes(x = cityMpg, y = highwayMpg)) +
geom_point() +
xlab("City MPG") +
ylab("Highway MPG")
# Create bar plot
ggplot(carIns_final, aes(x = bodyStyle)) +
geom_bar() +
xlab("Body Style") +
ylab("Count")
# Create histogram with bins of width equal to 5000
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
xlab("Price") +
ylab("Count")
# Create histogram with density overlay
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000, aes(y = ..density..), fill = "lightblue") +
geom_density(alpha = 0.5, color = "red") +
xlab("Price") +
ylab("Density")
# Create a histogram with density overlay
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000, aes(y = ..density..), fill = "lightblue") +
geom_density(color = "red") +
xlab("Price") +
ylab("Density") +
stat_function(fun = dnorm, args = list(mean = mean(carIns_final$price), sd = sd(carIns_final$price)), color = "blue")
# Create a boxplot with flipped coordinates
ggplot(carIns_final, aes(x = make, y = price)) +
geom_boxplot() +
xlab("Make") +
ylab("Price") +
coord_flip()
# Create a histogram with different colors for nDoors
ggplot(carIns_final, aes(x = price, fill = nDoors)) +
geom_histogram(binwidth = 5000, position = "identity", alpha = 0.5) +
xlab("Price") +
ylab("Count") +
scale_fill_discrete(name = "Number of Doors")
# Create a histogram with different colors for nDoors
ggplot(carIns_final, aes(x = price, fill = nDoors)) +
geom_histogram(binwidth = 5000, position = "identity", alpha = 0.5) +
xlab("Price") +
ylab("Count") +
scale_fill_discrete(name = "Number of Doors")
# Create a histogram with different colors for bodyStyle and facets for nDoors
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_wrap(~ bodyStyle + nDoors, scales = "free_y") +
xlab("Price") +
ylab("Count")
# Create a histogram with facet_wrap
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_wrap(~ bodyStyle + nDoors, scales = "free_y") +
xlab("Price") +
ylab("Count")
# Create histograms for bodyStyle and facets for nDoors
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_grid(bodyStyle ~ nDoors) +
xlab("Price") +
ylab("Count")
# Create a histogram with free_y
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_grid(bodyStyle ~ nDoors, scales = "free_y") +
xlab("Price") +
ylab("Count")
install.packages("dplyr")
library(dplyr)
load("../data/03_data_exploration/carIns_final.Rdata")
head(carIns_final)
# Calculate the counts of cars by bodyStyle
car_counts <- table(carIns_final$bodyStyle)
# Print the counts
print(car_counts)
# Calculate the counts of cars by bodyStyle and fuelType
car_counts <- table(carIns_final$bodyStyle, carIns_final$fuelType)
# Print the counts
print(car_counts)
# Calculate the mean and standard deviation of cityMpg by bodyStyle
car_summary <- carIns_final %>%
group_by(bodyStyle) %>%
summarise(mean_cityMpg = mean(cityMpg),
sd_cityMpg = sd(cityMpg)) %>%
arrange(mean_cityMpg)
# Print the summary
print(car_summary)
# Calculate the summary statistics by bodyStyle for cityMpg and highwayMpg
car_summary <- carIns_final %>%
group_by(bodyStyle) %>%
summarise(mean_cityMpg = mean(cityMpg),
sd_cityMpg = sd(cityMpg),
median_cityMpg = median(cityMpg),
IQR_cityMpg = IQR(cityMpg),
mean_highwayMpg = mean(highwayMpg),
sd_highwayMpg = sd(highwayMpg),
median_highwayMpg = median(highwayMpg),
IQR_highwayMpg = IQR(highwayMpg))
# Print the summary
print(car_summary)
install.packages("ggplot2")
library(ggplot2)
# Create scatter plot
ggplot(carIns_final, aes(x = cityMpg, y = highwayMpg)) +
geom_point() +
xlab("City MPG") +
ylab("Highway MPG")
# Create bar plot
ggplot(carIns_final, aes(x = bodyStyle)) +
geom_bar() +
xlab("Body Style") +
ylab("Count")
# Create histogram with bins of width equal to 5000
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
xlab("Price") +
ylab("Count")
# Create histogram with density overlay
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000, aes(y = ..density..), fill = "lightblue") +
geom_density(alpha = 0.5, color = "red") +
xlab("Price") +
ylab("Density")
# Create a histogram with density overlay
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000, aes(y = ..density..), fill = "lightblue") +
geom_density(color = "red") +
xlab("Price") +
ylab("Density") +
stat_function(fun = dnorm, args = list(mean = mean(carIns_final$price), sd = sd(carIns_final$price)), color = "blue")
# Create a boxplot with flipped coordinates
ggplot(carIns_final, aes(x = make, y = price)) +
geom_boxplot() +
xlab("Make") +
ylab("Price") +
coord_flip()
# Create a histogram with different colors for nDoors
ggplot(carIns_final, aes(x = price, fill = nDoors)) +
geom_histogram(binwidth = 5000, position = "identity", alpha = 0.5) +
xlab("Price") +
ylab("Count") +
scale_fill_discrete(name = "Number of Doors")
# Create histograms for bodyStyle and facets for nDoors
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_grid(bodyStyle ~ nDoors) +
xlab("Price") +
ylab("Count")
# Create a histogram with free_y
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_grid(bodyStyle ~ nDoors, scales = "free_y") +
xlab("Price") +
ylab("Count")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
load("../data/03_data_exploration/carIns_final.Rdata")
head(carIns_final)
# Calculate the counts of cars by bodyStyle
car_counts <- table(carIns_final$bodyStyle)
# Print the counts
print(car_counts)
# Calculate the counts of cars by bodyStyle and fuelType
car_counts <- table(carIns_final$bodyStyle, carIns_final$fuelType)
# Print the counts
print(car_counts)
# Calculate the mean and standard deviation of cityMpg by bodyStyle
car_summary <- carIns_final %>%
group_by(bodyStyle) %>%
summarise(mean_cityMpg = mean(cityMpg),
sd_cityMpg = sd(cityMpg)) %>%
arrange(mean_cityMpg)
# Print the summary
print(car_summary)
# Calculate the summary statistics by bodyStyle for cityMpg and highwayMpg
car_summary <- carIns_final %>%
group_by(bodyStyle) %>%
summarise(mean_cityMpg = mean(cityMpg),
sd_cityMpg = sd(cityMpg),
median_cityMpg = median(cityMpg),
IQR_cityMpg = IQR(cityMpg),
mean_highwayMpg = mean(highwayMpg),
sd_highwayMpg = sd(highwayMpg),
median_highwayMpg = median(highwayMpg),
IQR_highwayMpg = IQR(highwayMpg))
# Print the summary
print(car_summary)
install.packages("ggplot2")
library(ggplot2)
# Create scatter plot
ggplot(carIns_final, aes(x = cityMpg, y = highwayMpg)) +
geom_point() +
xlab("City MPG") +
ylab("Highway MPG")
# Create bar plot
ggplot(carIns_final, aes(x = bodyStyle)) +
geom_bar() +
xlab("Body Style") +
ylab("Count")
# Create histogram with bins of width equal to 5000
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
xlab("Price") +
ylab("Count")
# Create histogram with density overlay
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000, aes(y = ..density..), fill = "lightblue") +
geom_density(alpha = 0.5, color = "red") +
xlab("Price") +
ylab("Density")
# Create a histogram with density overlay
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000, aes(y = ..density..), fill = "lightblue") +
geom_density(color = "red") +
xlab("Price") +
ylab("Density") +
stat_function(fun = dnorm, args = list(mean = mean(carIns_final$price), sd = sd(carIns_final$price)), color = "blue")
# Create a boxplot with flipped coordinates
ggplot(carIns_final, aes(x = make, y = price)) +
geom_boxplot() +
xlab("Make") +
ylab("Price") +
coord_flip()
# Create a histogram with different colors for nDoors
ggplot(carIns_final, aes(x = price, fill = nDoors)) +
geom_histogram(binwidth = 5000, position = "identity", alpha = 0.5) +
xlab("Price") +
ylab("Count") +
scale_fill_discrete(name = "Number of Doors")
# Create histograms for bodyStyle and facets for nDoors
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_grid(bodyStyle ~ nDoors) +
xlab("Price") +
ylab("Count")
# Create a histogram with free_y
ggplot(carIns_final, aes(x = price)) +
geom_histogram(binwidth = 5000) +
facet_grid(bodyStyle ~ nDoors, scales = "free_y") +
xlab("Price") +
ylab("Count")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("jupytext")
library(jupytext)
install.packages("jupytext")
library(jupytext)
install.packages("jupytext")
library(jupytext)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
